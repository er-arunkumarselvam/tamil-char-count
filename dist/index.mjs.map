{"mappings":"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","sources":["src/index.ts","src/utils.ts","src/tokenize.ts","src/char.ts","src/tamil-char-types.ts","src/token.ts","src/varna.ts"],"sourcesContent":["import * as utils from \"./utils\";\n\nimport { tokenize } from \"./tokenize\";\n\nimport { Token, TokenType } from \"./token\";\nimport { Varna, VarnaType } from \"./varna\";\n\ntype Results = {\n  all: Token[];\n  aksharas: Token[];\n  varnas: Varna[];\n  symbols: Token[];\n  whitespaces: Token[];\n  chars: string[];\n  invalid: Token[];\n  unrecognised: Token[];\n};\n\nconst analyse = (input: string): Results => {\n  const tokens = tokenize(input);\n\n  const aksharas = utils.filterTokens(tokens, TokenType.Akshara);\n\n  const varnas = utils.extractVarnas(aksharas);\n\n  const chars = input.split(\"\");\n\n  const symbols = utils.filterTokens(tokens, TokenType.Symbol);\n\n  const invalidChars = utils.filterTokens(tokens, TokenType.Invalid);\n\n  const whitespaces = utils.filterTokens(tokens, TokenType.Whitespace);\n\n  const unrecognisedChars = utils.filterTokens(tokens, TokenType.Unrecognised);\n\n  return {\n    all: tokens,\n    aksharas: aksharas,\n    varnas: varnas,\n    chars: chars,\n    symbols: symbols,\n    invalid: invalidChars,\n    whitespaces: whitespaces,\n    unrecognised: unrecognisedChars,\n  };\n};\n\nconst Aksharas = {\n  analyse,\n  TokenType,\n  VarnaType,\n};\n\nexport default Aksharas;\n\nexport { TokenType, VarnaType };\n","import { Token, TokenType } from \"./token\";\nimport { Varna } from \"./varna\";\n\nexport const extractVarnas = (aksharas: Token[]): Varna[] =>\n  aksharas.flatMap((akshara) => akshara.attributes?.varnas);\n\nexport const filterTokens = (tokens: Token[], tokenType: TokenType) =>\n  tokens.filter((token) => token.type === tokenType);\n\nexport const getVowel = (vowelMark: string): string =>\n  ({\n    \"ா\": \"ஆ\",\n    \"ி\": \"இ\",\n    \"◌ீ\": \"ஈ\",\n    \"ு\": \"உ\",\n    \"ூ\": \"ஊ\",\n    \"ெ\": \"எ\",\n    \"ே\": \"ஏ\",\n    \"ை\": \"ஐ\",\n    \"ொ\": \"ஒ\",\n    \"ோ\": \"ஓ\",\n    \"ௌ\": \"ஔ\",\n  }[vowelMark] || \"\");\n","import { Char } from \"./char\";\nimport { getVowel } from \"./utils\";\nimport { Token, TokenAttributes, TokenType } from \"./token\";\nimport { Varna, VarnaType, VARNAS } from \"./varna\";\n\nenum State {\n  Initial,\n  Vowel,\n  Consonant,\n  ConjunctConsonant,\n}\n\nexport const tokenize = (input: string): Token[] => {\n  const tokens: Token[] = [];\n\n  let pos: number = 0;\n  let acc: string = \"\";\n  let svaraAcc: string = \"\";\n  let vyanjanaAcc: string = \"\";\n  let varnas: Varna[] = [];\n  let state = State.Initial;\n\n  const resetVariables = () => {\n    pos = 0;\n    acc = \"\";\n    svaraAcc = \"\";\n    vyanjanaAcc = \"\";\n    varnas = [];\n    state = State.Initial;\n  };\n\n  const createToken = (tokenType: TokenType, attributes?: TokenAttributes) => {\n    tokens.push(new Token(tokenType, acc, pos, attributes));\n    resetVariables();\n  };\n\n  for (let i = 0, l = input.length; i < l; i += 1) {\n    const char = new Char(input[i]);\n\n    const nextChar = new Char(input[i + 1]);\n\n    acc += char.value;\n\n    switch (state) {\n      case State.Initial: {\n        pos = i;\n\n        if (char.isOm()) {\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([\n              new Varna(VarnaType.Svara, VARNAS.Om[0]),\n              new Varna(VarnaType.Vyanjana, VARNAS.Om[1]),\n            ]),\n          });\n          break;\n        }\n\n        if (char.isSymbol()) {\n          createToken(TokenType.Symbol);\n          break;\n        }\n\n        if (char.isWhitespace()) {\n          createToken(TokenType.Whitespace);\n          break;\n        }\n\n        if (char.isUnrecognised()) {\n          createToken(TokenType.Unrecognised);\n          break;\n        }\n\n        if (char.isVowel()) {\n          if (nextChar.isVowelAttachment()) {\n            state = State.Vowel;\n            break;\n          }\n\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([new Varna(VarnaType.Svara, acc)]),\n          });\n          break;\n        }\n\n        if (char.isConsonant()) {\n          vyanjanaAcc += char.value;\n\n          if (nextChar.isNukta() || nextChar.isConsonantAttachment()) {\n            state = State.Consonant;\n            break;\n          }\n\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([\n              new Varna(VarnaType.Vyanjana, vyanjanaAcc + VARNAS.Virama),\n              new Varna(VarnaType.Svara, VARNAS.InherentA),\n            ]),\n          });\n          break;\n        }\n\n        createToken(TokenType.Invalid);\n        break;\n      }\n\n      case State.Vowel: {\n        if (char.isAccent()) {\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([new Varna(VarnaType.Svara, acc)]),\n          });\n          break;\n        }\n\n        if (char.isYogavaha()) {\n          if (nextChar.isAccent()) {\n            break;\n          }\n\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([new Varna(VarnaType.Svara, acc)]),\n          });\n          break;\n        }\n\n        break;\n      }\n\n      case State.Consonant: {\n        if (char.isNukta()) {\n          vyanjanaAcc += char.value;\n\n          if (nextChar.isConsonantAttachment()) {\n            break;\n          }\n\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([\n              new Varna(VarnaType.Vyanjana, vyanjanaAcc + VARNAS.Virama),\n              new Varna(VarnaType.Svara, VARNAS.InherentA),\n            ]),\n          });\n          break;\n        }\n\n        if (char.isVirama()) {\n          vyanjanaAcc += char.value;\n\n          if (nextChar.isJoiner()) {\n            break;\n          }\n\n          if (nextChar.isConsonant()) {\n            varnas = varnas.concat([\n              new Varna(VarnaType.Vyanjana, vyanjanaAcc),\n            ]);\n\n            state = State.ConjunctConsonant;\n            break;\n          }\n\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([new Varna(VarnaType.Vyanjana, vyanjanaAcc)]),\n          });\n          break;\n        }\n\n        if (char.isJoiner()) {\n          vyanjanaAcc += char.value;\n\n          if (nextChar.isJoiner()) {\n            break;\n          }\n\n          if (nextChar.isConsonant()) {\n            varnas = varnas.concat([\n              new Varna(VarnaType.Vyanjana, vyanjanaAcc),\n            ]);\n\n            state = State.ConjunctConsonant;\n            break;\n          }\n\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([new Varna(VarnaType.Vyanjana, vyanjanaAcc)]),\n          });\n          break;\n        }\n\n        if (char.isVowelMarkAttachment()) {\n          svaraAcc = (svaraAcc || VARNAS.InherentA) + char.value;\n\n          if (nextChar.isAccent()) {\n            break;\n          }\n\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([\n              new Varna(VarnaType.Vyanjana, vyanjanaAcc + VARNAS.Virama),\n              new Varna(VarnaType.Svara, svaraAcc),\n            ]),\n          });\n          break;\n        }\n\n        if (char.isVowelMark()) {\n          svaraAcc = getVowel(char.value);\n\n          if (nextChar.isVowelMarkAttachment()) {\n            break;\n          }\n\n          createToken(TokenType.Akshara, {\n            varnas: varnas.concat([\n              new Varna(VarnaType.Vyanjana, vyanjanaAcc + VARNAS.Virama),\n              new Varna(VarnaType.Svara, svaraAcc),\n            ]),\n          });\n          break;\n        }\n      }\n\n      case State.ConjunctConsonant: {\n        vyanjanaAcc = char.value;\n\n        if (nextChar.isNukta() || nextChar.isConsonantAttachment()) {\n          state = State.Consonant;\n          break;\n        }\n\n        createToken(TokenType.Akshara, {\n          varnas: varnas.concat([\n            new Varna(VarnaType.Vyanjana, vyanjanaAcc + VARNAS.Virama),\n            new Varna(VarnaType.Svara, VARNAS.InherentA),\n          ]),\n        });\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n\n  return tokens;\n};\n","import { TAMIL_CHAR_TYPES } from \"./tamil-char-types\";\n\nenum CharType {\n  Vowel = \"vowels\",\n  Symbol = \"symbols\",\n  VowelMark = \"vowel_marks\",\n  Yogavaha = \"yogavaahas\",\n  Accent = \"accents\",\n  Virama = \"virama\",\n  Nukta = \"nukta\",\n  ZWNJ = \"zwnj\",\n  ZWJ = \"zwj\",\n  Consonant = \"consonants\",\n  ExtraConsonant = \"extra_consonants\",\n  Whitespace = \"whitespace\",\n  Unrecognised = \"unrecognised\",\n  EndOfInput = \"end_of_input\",\n}\n\nconst OM = \"ௐ\";\nconst MATRAS = [\"௧\", \"௨\", \"௩\"];\n\nexport class Char {\n  value: string;\n  type: CharType;\n\n  constructor(value: string) {\n    this.value = value;\n    this.type = this.#getCharType(value);\n  }\n\n  #getCharType = (char: string): CharType => {\n    if (char === undefined) return CharType.EndOfInput;\n\n    if (/\\s/.test(char)) return CharType.Whitespace;\n\n    return TAMIL_CHAR_TYPES[char] ?? CharType.Unrecognised;\n  };\n\n  isVowel = () => this.type === CharType.Vowel;\n\n  isConsonant = () =>\n    [CharType.Consonant, CharType.ExtraConsonant].includes(this.type);\n\n  isOm = () => this.value === OM;\n\n  isSymbol = () => this.type === CharType.Symbol;\n\n  isVowelMark = () => this.type === CharType.VowelMark;\n\n  isYogavaha = () => this.type === CharType.Yogavaha;\n\n  isAccent = () => this.type === CharType.Accent;\n\n  isVirama = () => this.type === CharType.Virama;\n\n  isNukta = () => this.type === CharType.Nukta;\n\n  isMatra = () => MATRAS.includes(this.value);\n\n  isJoiner = () => [CharType.ZWNJ, CharType.ZWJ].includes(this.type);\n\n  isWhitespace = () => this.type === CharType.Whitespace;\n\n  isUnrecognised = () => this.type === CharType.Unrecognised;\n\n  isEndOfInput = () => this.type === CharType.EndOfInput;\n\n  isVowelAttachment = () => this.isYogavaha() || this.isAccent();\n\n  isConsonantAttachment = () =>\n    this.isVirama() ||\n    this.isYogavaha() ||\n    this.isAccent() ||\n    this.isVowelMark() ||\n    this.isMatra();\n\n  isVowelMarkAttachment = () =>\n    this.isYogavaha() || this.isAccent() || this.isMatra();\n\n  //   Only for debugging\n  //   toString = () => this.value;\n}\n","export const TAMIL_CHAR_TYPES: Record<string, any> = {\n  அ: \"vowels\",\n  ஆ: \"vowels\",\n  இ: \"vowels\",\n  ஈ: \"vowels\",\n  உ: \"vowels\",\n  ஊ: \"vowels\",\n  எ: \"vowels\",\n  ஏ: \"vowels\",\n  ஐ: \"vowels\",\n  ஒ: \"vowels\",\n  ஓ: \"vowels\",\n  ஔ: \"vowels\",\n  ஃ: \"vowels\",\n  க: \"consonants\",\n  ங: \"consonants\",\n  ச: \"consonants\",\n  ஞ: \"consonants\",\n  ட: \"consonants\",\n  ண: \"consonants\",\n  த: \"consonants\",\n  ந: \"consonants\",\n  ப: \"consonants\",\n  ம: \"consonants\",\n  ய: \"consonants\",\n  ர: \"consonants\",\n  ல: \"consonants\",\n  வ: \"consonants\",\n  ழ: \"consonants\",\n  ள: \"consonants\",\n  ற: \"consonants\",\n  ன: \"consonants\",\n  ஜ: \"extra_consonants\",\n  ஶ: \"extra_consonants\",\n  ஷ: \"extra_consonants\",\n  ஸ: \"extra_consonants\",\n  ஹ: \"extra_consonants\",\n  \"◌்\": \"yogavaahas\",\n  \"ா\": \"vowel_marks\",\n  \"ி\": \"vowel_marks\",\n  \"◌ீ\": \"vowel_marks\",\n  \"ு\": \"vowel_marks\",\n  \"ூ\": \"vowel_marks\",\n  \"ெ\": \"vowel_marks\",\n  \"ே\": \"vowel_marks\",\n  \"ை\": \"vowel_marks\",\n  \"ொ\": \"vowel_marks\",\n  \"ோ\": \"vowel_marks\",\n  \"ௌ\": \"vowel_marks\",\n  \"ௗ\": \"vowel_marks\",\n  \"‍\": \"zwj\",\n  \"‌\": \"zwnj\",\n  \"௦\": \"symbols\",\n  \"௧\": \"symbols\",\n  \"௨\": \"symbols\",\n  \"௩\": \"symbols\",\n  \"௪\": \"symbols\",\n  \"௫\": \"symbols\",\n  \"௭\": \"symbols\",\n  \"௮\": \"symbols\",\n  \"௯\": \"symbols\",\n  \"௰\": \"symbols\",\n  \"௱\": \"symbols\",\n  \"௲\": \"symbols\",\n  ௐ: \"symbols\",\n  \"।\": \"symbols\",\n  \"॥\": \"symbols\",\n};\n","export enum TokenType {\n  Akshara = \"akshara\",\n  Symbol = \"symbol\",\n  Whitespace = \"whitespace\",\n  Invalid = \"invalid\",\n  Unrecognised = \"unrecognised\",\n}\n\nexport type TokenAttributes = Record<string, any>;\n\nexport class Token {\n  readonly type: TokenType;\n  readonly value: string;\n  readonly from: number;\n  readonly to: number;\n  readonly attributes?: TokenAttributes;\n\n  constructor(\n    type: TokenType,\n    value: string,\n    pos: number,\n    attributes?: TokenAttributes\n  ) {\n    this.type = type;\n    this.value = value;\n    this.from = pos;\n    this.to = pos + (value.length - 1);\n    this.attributes = attributes;\n  }\n\n  //   Only for debugging\n  //   toString = () => this.value;\n}\n","export enum VarnaType {\n  Svara = \"svara\",\n  Vyanjana = \"vyanjana\",\n}\n\nexport const VARNAS = {\n  Virama: \"◌்\",\n  InherentA: \"அ\",\n  Om: [\"ஓ\", \"ம்\"],\n};\n\nexport class Varna {\n  readonly type: VarnaType;\n  readonly value: string;\n\n  constructor(type: VarnaType, value: string) {\n    this.type = type;\n    this.value = value;\n  }\n}\n"],"names":[],"version":3,"file":"index.mjs.map"}